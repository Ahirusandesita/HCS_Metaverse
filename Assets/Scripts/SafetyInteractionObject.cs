using UnityEngine;
using UniRx;
using System;

/// <summary>
/// 二重のインタラクトを実装するオブジェクトの基底クラス
/// <br>（コライダー内に入り、かつ入力が必要）</br>
/// </summary>
public abstract class SafetyInteractionObject : MonoBehaviour, IInteraction, ISelectedNotification
{
	public class SafetyInteractionInfo : IInteraction.InteractionInfo
	{
		/// <summary>
		/// SafetyOpen（プレイヤーがInteractableなオブジェクトに触れ、かつ入力があった場合）が起動した際に発火するデリゲート
		/// <br>SafetyCloseが発火したタイミングで中身がすべてDisposeされる</br>
		/// </summary>
		public event Action OnSafetyOpenAction = default;
		/// <summary>
		/// SafetyClose（プレイヤーがInteractableから特定の操作で離れた場合）が起動した際に発火するデリゲート
		/// <br>SafetyCloseが発火したタイミングで中身がすべてDisposeされる</br>
		/// </summary>
		public event Action OnSafetyCloseAction = default;

		/// <summary>
		/// SafetyOpen時にデリゲートを実行する
		/// <br>実行はSafetyInteractionObjectクラスに限る（引数で自身を渡す）</br>
		/// </summary>
		/// <param name="safetyInteractionObject">自分自身</param>
		public void InvokeOpen(SafetyInteractionObject safetyInteractionObject)
		{
			OnSafetyOpenAction?.Invoke();
		}
		/// <summary>
		/// SafetyClose時にデリゲートを実行する
		/// <br>実行はSafetyInteractionObjectクラスに限る（引数で自身を渡す）</br>
		/// </summary>
		/// <param name="safetyInteractionObject">自分自身</param>
		public void InvokeClose(SafetyInteractionObject safetyInteractionObject)
		{
			OnSafetyCloseAction?.Invoke();
		}
		/// <summary>
		/// SafetyOpen時のデリゲートをリセットする
		/// <br>実行はSafetyInteractionObjectクラスに限る（引数で自身を渡す）</br>
		/// </summary>
		/// <param name="safetyInteractionObject">自分自身</param>
		public void ClearOpen(SafetyInteractionObject safetyInteractionObject)
		{
			OnSafetyOpenAction = null;
		}
		/// <summary>
		/// SafetyClose時のデリゲートをリセットする
		/// <br>実行はSafetyInteractionObjectクラスに限る（引数で自身を渡す）</br>
		/// </summary>
		/// <param name="safetyInteractionObject">自分自身</param>
		public void ClearClose(SafetyInteractionObject safetyInteractionObject)
		{
			OnSafetyCloseAction = null;
		}
	}

	protected bool canInteract = false;

	ISelectedNotification IInteraction.SelectedNotification => this;
	private PlayerInputActions.PlayerActions Player => Inputter.Player;


	protected virtual void Awake()
	{
		// Interact入力の購読
		Player.Interact.performed += _ =>
		{
			XDebug.Log(canInteract, "magenta");
			if (canInteract)
			{
				SafetyOpen();
			}
		};
	}

	public virtual IInteraction.InteractionInfo Open()
	{
		canInteract = true;
		// UIを表示
		NotificationUIManager.Instance.DisplayInteraction();
		return new SafetyInteractionInfo();
	}

	public virtual void Close()
	{
		canInteract = false;
		// UIを非表示
		NotificationUIManager.Instance.HideInteraction();
	}

	/// <summary>
	/// オブジェクトがインタラクトされたときに呼ばれる処理
	/// <br>プレイヤーがオブジェクトの範囲上で入力をしたときに呼ばれる</br>
	/// </summary>
	protected abstract void SafetyOpen();
	/// <summary>
	/// オブジェクトのインタラクト状態から離れるときに呼ばれる処理
	/// <br>プレイヤーがオブジェクトの範囲上で入力をしたときに呼ばれる</br>
	/// <br>※各自継承先で呼び出すこと</br>
	/// </summary>
	protected abstract void SafetyClose();

	public abstract void Select(SelectArgs selectArgs);
	public abstract void Unselect(SelectArgs selectArgs);

	public virtual void Hover(SelectArgs selectArgs) { }
	public virtual void Unhover(SelectArgs selectArgs) { }
}